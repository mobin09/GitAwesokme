1.Git Introduction
-----------------
 > Git is a popular version control system (VCS)
 > It was created by Linus Torvalds in 2005 and it is maintained by Junio Hamano
 

Git is used for
---------------
 > Tracking code changes.
 > Tracking who made the changes like history of files.
 > Coding collabarations.
 
Types of Version Control System
-------------------------------
 > Local Version Control System.
 > Centralized Version Control System.
 > Distributed Version Control System.
 
Local Version Control System
----------------------------
 > A local version Control System is a local database located on your local computer, in which every file change 
   is stored as a patch

Centralized Version Control System
---------------------------------- 
 > Centralized Version Control System contain just one repository globally and every user need to commit for reflecting
   One's changes in the repository. It is possible for others to see you changes by updating e.g SVN

Distributed Version Control System
----------------------------------
 > Distributed Version Control Systems contain multiple repositories. Each user has their own repository
   and working copy just committing your changes will not give others access to your changes.
   This is because commit will reflect those changes in your local repository and you need to push 
   them in order to make them visible on the central repository.
   Similarly, when you update, you do not get other changes, unless you have
   first pulled those changes into your repository.   
   
 > To make your changes visible to others, four things are required
          You commit
          You push
          They pull
          They update

 > The most popular version control systems are Git and Mercurial
		  
There are two types of Git Software
-----------------------------------
        1. Git Server
		2. Git Client
		   
Git Server
----------
 > It is a repository.
 > It is the largest host of the source code.
 > It is used to mannage/store the source code of the project. 
 > Some of the Git server tools are:- Githhub, BitBucket, GitLab etc.
 
Git Client
----------
 > It is a tool which is used to connect to our Git server.
   e.g     > Git bash -- Linux command are required
           > Git gui  -- GUI through clicks
		   > Git cmd  -- command line tools

How git Works
------------
 > Compared to other VCS like subversions. Most operations in Git requires local files and local 
   resources to operate. 
 > If you are used to CVCS where most operations have that network latency overhead.

Architecture of Git (Three stages in Git)
--------------------
                        add                    commit                       push
	  |Working Area ----------> Staging Area ----------> Local Repository |-----------> Git Server
	  
	  To understant it better see pics of Architecture of Git.
	  
	  Once the code in staging area, we commit it to the local repository with some standard message,
	  from local repository we push it to remote repository by providing url, username and password
	  
Workign Directory (Working Area)
--------------------------------
 > The working area is a single checkout of one version of the project.
   These files are pulled out of the compressed database in the Git
   directory and placed on disk for you to use or modify.
   
Stagin Area
-----------
 > The staging area is a file, generally contained in your Git directory,
   that stores information about what will go into your next commit. Its
   technical name is the "Index", but the phrase "Staging area" works just as well.   

Local Repository (Repository Area)(.git)
----------------------------------
 > The Git directory is where Git stores the metadata and object database for your project.
   This is the most important part of Git, and it is what  is copied when you clone a repository
   from another computer.
   
Installing GIT
--------------
 > Install latest version of git from its official sites
 > git --version (TO check Git is installed or not)
 
There are a lot of different ways to use git
-------------------------------------------
 > Using Command Line Tools (Recommended)
 > Using Graphical User Interfaces 
 
 Git Configuration
 ------------------
 > After installing Git in our system.
 > The first thing we need to do is set our username and the email address.
 > This is because when we use git to change the files in the project.
   Git uses the information to identify who has made the changes to the file. 
 > The command to add username and password is:
        git config
        git config --list (to see list for configuration)
		git config --global user.email "myemail@gmail.com"
		git config --global user.name "Mobin Arshad"
		
 > There are three levels of configuration in Git: 
   System Level (Git Installation) {/usr/local/etc/gitconfig}
   Global Level (User Account) {Users/mobin/.gitconfig}
   Local level  (Repository / Project level) {repository/.git/config} {Project Level}
         > git config --local user.email "mobin@abc.com"
		 > git config --local user.name "Mobin Arshad"
		 
  To check :
         > git config user.email  
   
 > Check Complete Git config
   git config --list --show-origin  (Show location where it present and it's config)
 > Remove a specific setting for a specific level of config
   git config --global --unset user.name
 > Remove the specific section
   git config --global --remove-section user {remove all section}
   
  
Creating a Git repository
-------------------------  
 > mkdir directory-name
 > git init
 > git status
 
Initializing and creating directory at the same time
----------------------------------------------------
 > git init newProjectDirectory 
   
git help / git --help  and status command
---------------------------   
 > git help -a (To see all git commands)  {note--> q to quit}
 > git help init (to check the init command)
 > git help add 
 
 > git status (check the status
 
git add , git commit, git log, git log --oneline
------------------------------------------------
 > git add <file> ---- To update what will be commited --workign area to staging area -- untracked to tracked file
   git add .      ---- Move all files from working area to staging area -- untracked to tracked file
   
 > git commit -m "message" ---- The files which are ready for commit should be in stage area, 
                               to perform commit operation we use the this command 
 > git log ---- The number of commits
 > git log --oneline (Number of commits in one line)
 
 
git diff(working directory to staging area), git diff --staged (staging area to local repository),
git diff HEAD (working area to Local repository)
--------------------------------------------------------------------------------------------------
 > diff command is used in git the difference b/w the changes made on a file.
 > diff command takes two inputs and reflects the difference between them.
 
 > git diff           (check changes in the working area and the staged area)
 > git diff --staged  (check chanes in the staging area and local repository)
 > git diff HEAD      (check changes in the working area and local repository)
 
 
How Git stores the data
----------------------- 
 > Git stores the data in the form of keys and values
 > Value is nothing but the contents of the file.
 > You give the value and it will calculated a key for it,
   that is nothing but hash.
 > git calculated the hashes with SHA1 algorithm.   
 > SHA1 is a 20 bytes in hexadecimal format.
 > Not only the content of the files, the directories and so on commits has their own SHA-1
 > Every object in GIT has its own SHA1.
 > we can get the hashing of every commit using git log
 >e.g   git log
        commit bfe53ea7d2ce2725d206f81c4a76fc78a9706e07 (hash)
        Author: Mobin Arshad <mobink09@gmail.com>
        Date:   Thu Dec 22 16:17:20 2022 +0530
 > TO decode it what is wriiten inside we used: git cat-file <hash> -p
       git cat-file bfe53ea7d2ce2725d206f81c4a76fc78a9706e07 -p
	   
	   
       mobin@DESKTOP-K1MQ1QS MINGW64 /e/gitSession/workSpace (main)
       $  git cat-file bfe53ea7d2ce2725d206f81c4a76fc78a9706e07 -p
       tree e8ce5ba3d59c6e91ad69d9eca39b4d31d066fa6e   (above has is linked to this hash)
       parent 099177a501ca1d35375e21ac20df4a8be39d99d3
       author Mobin Arshad <mobink09@gmail.com> 1671706040 +0530
       committer Mobin Arshad <mobink09@gmail.com> 1671706040 +0530

       How git works

 > So again,
      git cat-file e8ce5ba3d59c6e91ad69d9eca39b4d31d066fa6e -p
	   
	  100644 blob a80115122d91b8cc2d259590ed8aa4478753814a    gitCommand.txt
      100644 blob 118faf58d02d635d20ab698899b2f9ab45fe6913    gitCommand.txt.bak 
	   
 > So again now	   
	 git cat-file e8ce5ba3d59c6e91ad69d9eca39b4d31d066fa6e -p 
     
	 this time we will get actual content in terminal
	
Rename(moving) and Restore files in GIT Repository using the mv and the restore command:
--------------------------------------------------------------------------------
	Renaming: 
	    mv abc.txt Abc.html  (Moving/Renaming from abc.txt to Abc.html) --{Linux based}
        git mv  abc.txt Test.txt (Git based renaming)
		
	Restore:
       git restore --staged <file>... from stage to unstage	
	   git restore Abc.html
	   
Git Branching. Understand the concept of creating branches in the GIT project:
------------------------------------------------------------------------------
   https://git-school.github.io/visualizing-git/   (Visualizing the git----> important)
   Have fun!
   git commit
   git commit
   git checkout -b loginFeatures
   git commit
   git commit
   git checkout master
   git commit
   git commit
   git commit
   git checkout -b signupFeatures
   git commit
   git commit
   git checkout master
   git commit
   git commit
	   
 > A branch is a version of the repository that diverges from the main working project.	 
 > It is a feature available in most modern version control systems.
 > A Git project can have more than one branch.
 > These branches are a pointer to a snapshot of your changes. 
 > When you want to add a new feature or fix a bug, you spawn a new branch to summarize your changes.
 > So, it is complex to merge the unstable code with the main code base and also facilitates 
   you to clean up your future history before merging with the main branch.
   
 > The master branch is a default branch in Git. It is instantiated when first commit made on the project.
   When you make the first commit, you're given a master branch to the starting commit point. 
   When you start making a commit, then master branch pointer automatically moves forward. 
   A repository can have only one master branch.
   Master branch is the branch in which all the changes eventually get merged back.
   It can be called as an official working version of your project.	   
   
Practical Implementation of the git branching:
---------------------------------------------
 > As soon as we initializing the project (git init) master branch created   
    git checkout -b login_features (created and switched to this branch)
    Switched to a new branch 'login_features'
	
	git branch  <branch name> (Only created the branch not switched) 
	
	git branch (git branch --list) -- TO see the total branches
	 git branch --list
     Test
   * login_features
     main

 > What ever commit are done to required branch that commit is available only to that branch. 

Operations on Branches:
----------------------
 We can perform various operations on Git branches. The git branch command allows you to create,
 list, rename and delete branches. Many operations on branches are applied by git checkout and git merge command. 
 So, the git branch is tightly integrated with the git checkout and git merge commands.
  
About branch:
-------------------------
 > Branches are stored in the .git -> refs -> heads 
 > check what is present inside the branches file e.g checking for the main branch
       cat .git/refs/heads/main
       9ff3b6e64ac60888a26ebb67c612046967a285e7 (referencing to some commit)
	   
 > To see which branch head is pointing (current branch)
     $ CAT .git/HEAD
     ref: refs/heads/main  (pointing to the main branch)

Rename Branch:
-------------- 
 We can rename the branch with the help of the git branch command. To rename a branch, use the below command:
 $ git branch -m <old branch name> <new branch name>  	   
 git branch -m Test Dummy_branch 
 
Delete Branch:
-------------
  You can delete the specified branch. It is a safe operation.
  In this command, Git prevents you from deleting the branch if it has unmerged changes.
  Below is the command to do this.
     git branch -d<branch name>
	 $ git branch -d Dummy_branch
       Deleted branch Dummy_branch (was 36aba0c).
	   
  The git branch d command can be used in two formats.
  Another format of this command is git branch D. 
  The 'git branch D' command is used to delete the specified branch.	 
   
git Merge:
----------
  1. Fast Forward Merge
  2. Recursive Merge
  
  Git allows you to merge the other branch with the currently active branch.
  You can merge two branches with the help of git merge command.
  Below command is used to merge the branches:
   
 =====================
 
 
 
 14th Completed
 by Mobin Arshad Pathan